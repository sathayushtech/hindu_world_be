# Generated by Django 5.0.6 on 2024-07-29 10:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
            ],
            options={
                'db_table': 'category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Continent',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
                ('alternativename', models.CharField(blank=True, db_column='alternativename', max_length=45, null=True)),
                ('desc', models.CharField(blank=True, db_column='desc', max_length=250, null=True)),
                ('type', models.CharField(choices=[('CONTINENT', 'CONTINENT')], db_column='type', default='CONTINENT', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('hindu_population', models.CharField(db_column='hindu_population', max_length=100000)),
                ('overall_population', models.CharField(db_column='overall_population', max_length=100000)),
            ],
            options={
                'db_table': 'continent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
                ('alternativename', models.CharField(blank=True, db_column='alternativename', max_length=45, null=True)),
                ('desc', models.CharField(blank=True, db_column='desc', max_length=250, null=True)),
                ('type', models.CharField(blank=True, choices=[('COUNTRY', 'COUNTRY')], db_column='type', default='COUNTRY', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image_location', models.TextField(db_column='image_location')),
                ('hindu_population', models.CharField(db_column='hindu_population', max_length=100000)),
                ('overall_population', models.CharField(db_column='overall_population', max_length=100000)),
            ],
            options={
                'db_table': 'country',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
                ('shortname', models.CharField(db_column='shortname', max_length=45)),
                ('headquarters', models.CharField(blank=True, db_column='headquarters', max_length=45, null=True)),
                ('desc', models.CharField(blank=True, db_column='desc', max_length=250, null=True)),
                ('cityname', models.CharField(max_length=200)),
                ('created_at', models.CharField(max_length=200)),
                ('type', models.CharField(blank=True, choices=[('DISTRICT', 'DISTRICT'), ('CITY', 'CITY')], db_column='type', default='DISTRICT', max_length=30)),
            ],
            options={
                'db_table': 'district',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('organization_name', models.CharField(max_length=200)),
                ('est_by', models.CharField(max_length=100)),
                ('chairman', models.CharField(max_length=100)),
                ('desc', models.TextField()),
                ('est_date', models.CharField(max_length=50)),
                ('reg_id', models.CharField(max_length=200)),
                ('location', models.TextField()),
                ('web_url', models.URLField()),
                ('org_detail', models.TextField()),
                ('mission', models.TextField()),
                ('org_images', models.TextField()),
                ('org_logo', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('INACTIVE', 'INACTIVE')], default='PENDING', max_length=50)),
                ('geo_site', models.CharField(choices=[('DISTRICT', 'D'), ('STATE', 'S'), ('COUNTRY', 'C'), ('CONTINENT', 'CO')], default='D', max_length=50)),
                ('organization_members', models.CharField(max_length=10000, null=True)),
                ('govt_id_proof', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'organization',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
                ('shortname', models.CharField(db_column='shortname', max_length=45)),
                ('desc', models.CharField(blank=True, db_column='desc', max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(blank=True, choices=[('STATE', 'STATE')], db_column='type', default='STATE', max_length=30)),
            ],
            options={
                'db_table': 'state',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
            ],
            options={
                'db_table': 'sub_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(db_column='id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('full_name', models.CharField(db_column='full_name', max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('dob', models.DateField()),
                ('contact_number', models.CharField(blank=True, db_column='contact_number', max_length=10, null=True)),
                ('father_name', models.CharField(blank=True, db_column='father_name', max_length=200, null=True)),
                ('profile_pic', models.TextField(blank=True, db_column='profile_pic', null=True)),
                ('is_member', models.CharField(choices=[('TRUE', 'TRUE'), ('FALSE', 'FALSE')], default='FALSE', max_length=50)),
                ('verification_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('verification_otp_created_time', models.DateTimeField(null=True)),
                ('verification_otp_resend_count', models.IntegerField(db_column='verification_otp_resend_count', default=0)),
                ('status', models.CharField(choices=[('CREATED', 'CREATED'), ('ACTIVE', 'ACTIVE'), ('INACTIVE', 'INACTIVE')], default='CREATED', max_length=50)),
                ('forgot_password_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('forgot_password_otp_created_time', models.DateTimeField(null=True)),
                ('forgot_password_otp_resend_count', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'profile',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('_id', models.CharField(db_column='_id', default=uuid.uuid1, editable=False, max_length=45, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_column='name', max_length=45)),
                ('start_date', models.CharField(db_column='start_date', max_length=20)),
                ('end_date', models.CharField(max_length=20)),
                ('brochure', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('organizer_name', models.CharField(max_length=100)),
                ('contact_details', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org_id', models.ForeignKey(db_column='org', on_delete=django.db.models.deletion.CASCADE, to='hindu.organization')),
            ],
            options={
                'db_table': 'event',
            },
        ),
    ]
